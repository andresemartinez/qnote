#!/usr/bin/env bash
#
#   ___  _   _       _            
#  / _ \| \ | | ___ | |_ ___ 
# | | | |  \| |/ _ \| __/ _ \
# | |_| | |\  | (_) | ||  __/
#  \__\_\_| \_|\___/ \__\___|
#                                 
# A quick note taking app
# v0.0.4 - https://github.com/andresemartinez/qnote
#

# Configurations ------------------------------------------------------------------------

## Notes directory.
QNOTE_DIR="${QNOTE_DIR:-$HOME/notes}"

## Notes file extension.
QNOTE_EXTENSION="${QNOTE_EXTENSION:-md}"

## Notes editor of choice.
QNOTE_EDITOR=${QNOTE_EDITOR:-$EDITOR}


# Helper functions ----------------------------------------------------------------------

normalize_note_name() {
    NOTE_NAME="$1"
    NOTE_NAME="${NOTE_NAME// /-}"
    NOTE_NAME="${NOTE_NAME,,}"

    echo "$NOTE_NAME"
}

validate_note_name() {
    [ -z "$1" ] && { echo "Note name required :S"; exit 1; }
}

build_note_file_name() {
    NOTE_NAME="$1"
    NORMALIZED_NOTE_NAME="$(normalize_note_name "$NOTE_NAME")"
    echo "${NORMALIZED_NOTE_NAME%*.$QNOTE_EXTENSION}.$QNOTE_EXTENSION"
}

build_note_path() {
    NOTE_NAME="$1"
    NOTE_FILE_NAME="$(build_note_file_name "$NOTE_NAME")"
    echo "$QNOTE_DIR/$NOTE_FILE_NAME"
}

suffixed_note_name() {
    NOTE_NAME="$1"
    SUFFIX="$2"
    [ "$SUFFIX" -gt 0 ] && NOTE_NAME="${NOTE_NAME//.$QNOTE_EXTENSION/_$SUFFIX.$QNOTE_EXTENSION}" 
    echo "$NOTE_NAME"
}

print_invalid_option_message() {
    [ -z "$1" ] || echo "Invalid option ($1)"
}


# Action functions ----------------------------------------------------------------------

list_notes() {
    find "$QNOTE_DIR" -type f -printf "%TY-%Tm-%Td %TH:%TM - %P\\n" | sort -r
}

edit_note() {
    NOTE_NAME="$1"
    validate_note_name "$NOTE_NAME"
    $QNOTE_EDITOR "$(build_note_path "$NOTE_NAME")"
}

delete_note() {
    NOTE_NAME="$1"
    validate_note_name "$NOTE_NAME"
    rm "$(build_note_path "$NOTE_NAME")"
}

create_note() {
    NOTE_NAME="$1"
    NOTE_TITLE="$1"
    NOTE_BODY="$2"

    NOTE_NAME="$(build_note_path "$NOTE_NAME")"
    SUFFIX=0

    while [ -f "$(suffixed_note_name "$NOTE_NAME" "$SUFFIX")" ]
    do
        SUFFIX=$((SUFFIX + 1))
    done

    NOTE_NAME="$(suffixed_note_name "$NOTE_NAME" "$SUFFIX")"

    echo -ne "# $NOTE_TITLE\n$NOTE_BODY" > "$NOTE_NAME"
}

search_in_notes() {
    SEARCH_CRITERIA="$1"
    ESCAPED_QNOTE_DIR="${QNOTE_DIR//\//\\\/}"
    grep -iR "$SEARCH_CRITERIA" "$QNOTE_DIR" | sed -e "s/^$ESCAPED_QNOTE_DIR\\///"
}

copy_note() {
    NOTE_NAME="$1"
    validate_note_name "$NOTE_NAME"
    wl-copy < "$(build_note_path "$NOTE_NAME")"
}

read_with_glow() {
    [ -z "$(command -v glow)" ] && { echo "Couldn't find glow. Is it installed? (https://github.com/charmbracelet/glow)"; exit 1; }

    if [ -z "$1" ]
    then
        NOTE_PATH="$QNOTE_DIR"
    else
        NOTE_PATH="$(build_note_path "$1")"
    fi

    glow "$NOTE_PATH"
}

print_help() {
    echo "Help!"
    echo "- l,  list    : List notes"
    echo "- e,  edit    : Create/Edit note"
    echo "- d,  delete  : Delete note"
    echo "- i,  inline  : Create note inline"
    echo "- s,  search  : Search in notes"
    echo "- g,  glow    : Read note with glow"
    echo "- cp, copy    : Copy note to clipboard"
    echo "- h,  help    : Print help"
    echo "- v,  version : Print version"
}

print_version() {
    echo "QNote - v0.0.4"
}

handle_invalid_option() {
    print_invalid_option_message "$1"
    print_help
    exit 1
}

case "$1" in
    l  | list    ) list_notes                 ;;
    e  | edit    ) edit_note "$2"             ;;
    d  | delete  ) delete_note "$2"           ;;
    i  | inline  ) create_note "$2" "$3"      ;;
    s  | search  ) search_in_notes "$2"       ;;
    cp | copy    ) copy_note "$2"             ;;
    g  | glow    ) read_with_glow "$2"        ;;
    h  | help    ) print_help                 ;;
    v  | version ) print_version              ;; 
    *            ) handle_invalid_option "$1" ;;
esac
